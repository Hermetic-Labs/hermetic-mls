// This file is @generated by prost-build.
/// Client messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterClientRequest {
    /// UUID of the user
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    /// Credential bytes
    #[prost(bytes = "vec", tag = "2")]
    pub credential: ::prost::alloc::vec::Vec<u8>,
    /// Credential scheme (e.g., "basic")
    #[prost(string, tag = "3")]
    pub scheme: ::prost::alloc::string::String,
    /// Device name/identifier
    #[prost(string, tag = "4")]
    pub device_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterClientResponse {
    /// UUID of the newly registered client
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClientRequest {
    /// UUID of the client to retrieve
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClientResponse {
    #[prost(message, optional, tag = "1")]
    pub client: ::core::option::Option<Client>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClientsRequest {
    /// UUID of the user whose clients to list
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClientsResponse {
    #[prost(message, repeated, tag = "1")]
    pub clients: ::prost::alloc::vec::Vec<Client>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Client {
    /// UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID of the user
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// Credential bytes
    #[prost(bytes = "vec", tag = "3")]
    pub credential: ::prost::alloc::vec::Vec<u8>,
    /// Credential scheme (e.g., "basic")
    #[prost(string, tag = "4")]
    pub scheme: ::prost::alloc::string::String,
    /// Device name/identifier
    #[prost(string, tag = "5")]
    pub device_name: ::prost::alloc::string::String,
    /// ISO timestamp of last activity
    #[prost(string, tag = "6")]
    pub last_seen: ::prost::alloc::string::String,
    /// ISO timestamp of creation
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
}
/// KeyPackage messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishKeyPackageRequest {
    /// UUID of the client
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// MLS KeyPackage bytes
    #[prost(bytes = "vec", tag = "2")]
    pub key_package: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublishKeyPackageResponse {
    /// UUID of the stored key package
    #[prost(string, tag = "1")]
    pub key_package_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetKeyPackageRequest {
    /// UUID of the key package to retrieve
    #[prost(string, tag = "1")]
    pub key_package_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetKeyPackageResponse {
    #[prost(message, optional, tag = "1")]
    pub key_package: ::core::option::Option<KeyPackage>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListKeyPackagesRequest {
    /// UUID of the client
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListKeyPackagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub key_packages: ::prost::alloc::vec::Vec<KeyPackage>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyPackage {
    /// UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID of the client
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    /// MLS KeyPackage bytes
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// ISO timestamp of creation
    #[prost(string, tag = "4")]
    pub created_at: ::prost::alloc::string::String,
    /// Whether the key package has been used
    #[prost(bool, tag = "5")]
    pub used: bool,
}
/// Group messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupRequest {
    /// UUID of the client creating the group
    #[prost(string, tag = "1")]
    pub creator_id: ::prost::alloc::string::String,
    /// Initial MLS group state
    #[prost(bytes = "vec", tag = "2")]
    pub initial_state: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupResponse {
    /// UUID of the created group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupRequest {
    /// UUID of the group to retrieve
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGroupResponse {
    #[prost(message, optional, tag = "1")]
    pub group: ::core::option::Option<Group>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListGroupsRequest {
    /// UUID of the client
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListGroupsResponse {
    #[prost(message, repeated, tag = "1")]
    pub groups: ::prost::alloc::vec::Vec<Group>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Group {
    /// UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID of the creator client
    #[prost(string, tag = "2")]
    pub creator_id: ::prost::alloc::string::String,
    /// Current epoch of the group
    #[prost(uint64, tag = "3")]
    pub epoch: u64,
    /// MLS group state
    #[prost(bytes = "vec", tag = "4")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    /// ISO timestamp of creation
    #[prost(string, tag = "5")]
    pub created_at: ::prost::alloc::string::String,
    /// ISO timestamp of last update
    #[prost(string, tag = "6")]
    pub updated_at: ::prost::alloc::string::String,
    /// Whether the group is active
    #[prost(bool, tag = "7")]
    pub is_active: bool,
}
/// Membership messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMemberRequest {
    /// UUID of the group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// UUID of the client to add
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    /// Role in the group (e.g., "admin", "member")
    #[prost(string, tag = "3")]
    pub role: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMemberResponse {
    /// UUID of the new membership
    #[prost(string, tag = "1")]
    pub membership_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveMemberRequest {
    /// UUID of the membership to remove
    #[prost(string, tag = "1")]
    pub membership_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemoveMemberResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMembershipsRequest {
    /// UUID of the group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListMembershipsResponse {
    #[prost(message, repeated, tag = "1")]
    pub memberships: ::prost::alloc::vec::Vec<Membership>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Membership {
    /// UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID of the client
    #[prost(string, tag = "2")]
    pub client_id: ::prost::alloc::string::String,
    /// UUID of the group
    #[prost(string, tag = "3")]
    pub group_id: ::prost::alloc::string::String,
    /// Role in the group
    #[prost(string, tag = "4")]
    pub role: ::prost::alloc::string::String,
    /// ISO timestamp of when added
    #[prost(string, tag = "5")]
    pub added_at: ::prost::alloc::string::String,
    /// ISO timestamp of when removed (if applicable)
    #[prost(string, tag = "6")]
    pub removed_at: ::prost::alloc::string::String,
}
/// MLS Message operations
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreProposalRequest {
    /// UUID of the group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// UUID of the sender client
    #[prost(string, tag = "2")]
    pub sender_id: ::prost::alloc::string::String,
    /// MLS proposal bytes
    #[prost(bytes = "vec", tag = "3")]
    pub proposal: ::prost::alloc::vec::Vec<u8>,
    /// Type of proposal (e.g., "add", "remove", "update")
    #[prost(string, tag = "4")]
    pub proposal_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreProposalResponse {
    /// UUID of the stored message
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreCommitRequest {
    /// UUID of the group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// UUID of the sender client
    #[prost(string, tag = "2")]
    pub sender_id: ::prost::alloc::string::String,
    /// MLS commit bytes
    #[prost(bytes = "vec", tag = "3")]
    pub commit: ::prost::alloc::vec::Vec<u8>,
    /// The new epoch after this commit
    #[prost(uint64, tag = "4")]
    pub epoch: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreCommitResponse {
    /// UUID of the stored message
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreWelcomeRequest {
    /// UUID of the group
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    /// UUID of the sender client
    #[prost(string, tag = "2")]
    pub sender_id: ::prost::alloc::string::String,
    /// MLS welcome bytes
    #[prost(bytes = "vec", tag = "3")]
    pub welcome: ::prost::alloc::vec::Vec<u8>,
    /// UUIDs of recipient clients
    #[prost(string, repeated, tag = "4")]
    pub recipient_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreWelcomeResponse {
    /// UUID of the stored message
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchMessagesRequest {
    /// UUID of the client
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// Optional UUID of a specific group
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// Whether to include already read messages
    #[prost(bool, tag = "3")]
    pub include_read: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<Message>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID of the group
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
    /// UUID of the sender client
    #[prost(string, tag = "3")]
    pub sender_id: ::prost::alloc::string::String,
    /// ISO timestamp of creation
    #[prost(string, tag = "4")]
    pub created_at: ::prost::alloc::string::String,
    /// Whether the message has been read
    #[prost(bool, tag = "5")]
    pub read: bool,
    /// Type: "proposal", "commit", or "welcome"
    #[prost(string, tag = "6")]
    pub message_type: ::prost::alloc::string::String,
    /// One of the following will be set based on message_type
    #[prost(oneof = "message::Content", tags = "7, 8, 9")]
    pub content: ::core::option::Option<message::Content>,
}
/// Nested message and enum types in `Message`.
pub mod message {
    /// One of the following will be set based on message_type
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "7")]
        Proposal(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "8")]
        Commit(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "9")]
        Welcome(::prost::alloc::vec::Vec<u8>),
    }
}
/// Generated client implementations.
pub mod mls_delivery_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MlsDeliveryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MlsDeliveryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MlsDeliveryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MlsDeliveryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MlsDeliveryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Client operations
        pub async fn register_client(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterClientRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterClientResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/RegisterClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "RegisterClient"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_client(
            &mut self,
            request: impl tonic::IntoRequest<super::GetClientRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetClientResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/GetClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "GetClient"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_clients(
            &mut self,
            request: impl tonic::IntoRequest<super::ListClientsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListClientsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/ListClients",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "ListClients"));
            self.inner.unary(req, path, codec).await
        }
        /// KeyPackage operations
        pub async fn publish_key_package(
            &mut self,
            request: impl tonic::IntoRequest<super::PublishKeyPackageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishKeyPackageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/PublishKeyPackage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "PublishKeyPackage"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_key_package(
            &mut self,
            request: impl tonic::IntoRequest<super::GetKeyPackageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetKeyPackageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/GetKeyPackage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "GetKeyPackage"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_key_packages(
            &mut self,
            request: impl tonic::IntoRequest<super::ListKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListKeyPackagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/ListKeyPackages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "ListKeyPackages"));
            self.inner.unary(req, path, codec).await
        }
        /// Group operations
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGroupResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/CreateGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "CreateGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_group(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/GetGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "GetGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_groups(
            &mut self,
            request: impl tonic::IntoRequest<super::ListGroupsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListGroupsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/ListGroups",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "ListGroups"));
            self.inner.unary(req, path, codec).await
        }
        /// Membership operations
        pub async fn add_member(
            &mut self,
            request: impl tonic::IntoRequest<super::AddMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddMemberResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/AddMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "AddMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_member(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveMemberResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/RemoveMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "RemoveMember"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_memberships(
            &mut self,
            request: impl tonic::IntoRequest<super::ListMembershipsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListMembershipsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/ListMemberships",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "ListMemberships"));
            self.inner.unary(req, path, codec).await
        }
        /// Message operations
        pub async fn store_proposal(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreProposalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreProposalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/StoreProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "StoreProposal"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn store_commit(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreCommitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreCommitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/StoreCommit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "StoreCommit"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn store_welcome(
            &mut self,
            request: impl tonic::IntoRequest<super::StoreWelcomeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreWelcomeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/StoreWelcome",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "StoreWelcome"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn fetch_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mls.MlsDeliveryService/FetchMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mls.MlsDeliveryService", "FetchMessages"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod mls_delivery_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MlsDeliveryServiceServer.
    #[async_trait]
    pub trait MlsDeliveryService: std::marker::Send + std::marker::Sync + 'static {
        /// Client operations
        async fn register_client(
            &self,
            request: tonic::Request<super::RegisterClientRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterClientResponse>,
            tonic::Status,
        >;
        async fn get_client(
            &self,
            request: tonic::Request<super::GetClientRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetClientResponse>,
            tonic::Status,
        >;
        async fn list_clients(
            &self,
            request: tonic::Request<super::ListClientsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListClientsResponse>,
            tonic::Status,
        >;
        /// KeyPackage operations
        async fn publish_key_package(
            &self,
            request: tonic::Request<super::PublishKeyPackageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublishKeyPackageResponse>,
            tonic::Status,
        >;
        async fn get_key_package(
            &self,
            request: tonic::Request<super::GetKeyPackageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetKeyPackageResponse>,
            tonic::Status,
        >;
        async fn list_key_packages(
            &self,
            request: tonic::Request<super::ListKeyPackagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListKeyPackagesResponse>,
            tonic::Status,
        >;
        /// Group operations
        async fn create_group(
            &self,
            request: tonic::Request<super::CreateGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGroupResponse>,
            tonic::Status,
        >;
        async fn get_group(
            &self,
            request: tonic::Request<super::GetGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetGroupResponse>,
            tonic::Status,
        >;
        async fn list_groups(
            &self,
            request: tonic::Request<super::ListGroupsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListGroupsResponse>,
            tonic::Status,
        >;
        /// Membership operations
        async fn add_member(
            &self,
            request: tonic::Request<super::AddMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddMemberResponse>,
            tonic::Status,
        >;
        async fn remove_member(
            &self,
            request: tonic::Request<super::RemoveMemberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveMemberResponse>,
            tonic::Status,
        >;
        async fn list_memberships(
            &self,
            request: tonic::Request<super::ListMembershipsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListMembershipsResponse>,
            tonic::Status,
        >;
        /// Message operations
        async fn store_proposal(
            &self,
            request: tonic::Request<super::StoreProposalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreProposalResponse>,
            tonic::Status,
        >;
        async fn store_commit(
            &self,
            request: tonic::Request<super::StoreCommitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreCommitResponse>,
            tonic::Status,
        >;
        async fn store_welcome(
            &self,
            request: tonic::Request<super::StoreWelcomeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreWelcomeResponse>,
            tonic::Status,
        >;
        async fn fetch_messages(
            &self,
            request: tonic::Request<super::FetchMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchMessagesResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MlsDeliveryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MlsDeliveryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MlsDeliveryServiceServer<T>
    where
        T: MlsDeliveryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/mls.MlsDeliveryService/RegisterClient" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterClientSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::RegisterClientRequest>
                    for RegisterClientSvc<T> {
                        type Response = super::RegisterClientResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterClientRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::register_client(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/GetClient" => {
                    #[allow(non_camel_case_types)]
                    struct GetClientSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::GetClientRequest>
                    for GetClientSvc<T> {
                        type Response = super::GetClientResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetClientRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::get_client(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetClientSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/ListClients" => {
                    #[allow(non_camel_case_types)]
                    struct ListClientsSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::ListClientsRequest>
                    for ListClientsSvc<T> {
                        type Response = super::ListClientsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListClientsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::list_clients(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListClientsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/PublishKeyPackage" => {
                    #[allow(non_camel_case_types)]
                    struct PublishKeyPackageSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::PublishKeyPackageRequest>
                    for PublishKeyPackageSvc<T> {
                        type Response = super::PublishKeyPackageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublishKeyPackageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::publish_key_package(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublishKeyPackageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/GetKeyPackage" => {
                    #[allow(non_camel_case_types)]
                    struct GetKeyPackageSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::GetKeyPackageRequest>
                    for GetKeyPackageSvc<T> {
                        type Response = super::GetKeyPackageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetKeyPackageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::get_key_package(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetKeyPackageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/ListKeyPackages" => {
                    #[allow(non_camel_case_types)]
                    struct ListKeyPackagesSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::ListKeyPackagesRequest>
                    for ListKeyPackagesSvc<T> {
                        type Response = super::ListKeyPackagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListKeyPackagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::list_key_packages(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListKeyPackagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/CreateGroup" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGroupSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::CreateGroupRequest>
                    for CreateGroupSvc<T> {
                        type Response = super::CreateGroupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateGroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::create_group(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/GetGroup" => {
                    #[allow(non_camel_case_types)]
                    struct GetGroupSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::GetGroupRequest>
                    for GetGroupSvc<T> {
                        type Response = super::GetGroupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetGroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::get_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/ListGroups" => {
                    #[allow(non_camel_case_types)]
                    struct ListGroupsSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::ListGroupsRequest>
                    for ListGroupsSvc<T> {
                        type Response = super::ListGroupsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListGroupsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::list_groups(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListGroupsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/AddMember" => {
                    #[allow(non_camel_case_types)]
                    struct AddMemberSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::AddMemberRequest>
                    for AddMemberSvc<T> {
                        type Response = super::AddMemberResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::add_member(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/RemoveMember" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveMemberSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::RemoveMemberRequest>
                    for RemoveMemberSvc<T> {
                        type Response = super::RemoveMemberResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveMemberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::remove_member(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveMemberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/ListMemberships" => {
                    #[allow(non_camel_case_types)]
                    struct ListMembershipsSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::ListMembershipsRequest>
                    for ListMembershipsSvc<T> {
                        type Response = super::ListMembershipsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListMembershipsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::list_memberships(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListMembershipsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/StoreProposal" => {
                    #[allow(non_camel_case_types)]
                    struct StoreProposalSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::StoreProposalRequest>
                    for StoreProposalSvc<T> {
                        type Response = super::StoreProposalResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreProposalRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::store_proposal(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StoreProposalSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/StoreCommit" => {
                    #[allow(non_camel_case_types)]
                    struct StoreCommitSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::StoreCommitRequest>
                    for StoreCommitSvc<T> {
                        type Response = super::StoreCommitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreCommitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::store_commit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StoreCommitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/StoreWelcome" => {
                    #[allow(non_camel_case_types)]
                    struct StoreWelcomeSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::StoreWelcomeRequest>
                    for StoreWelcomeSvc<T> {
                        type Response = super::StoreWelcomeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StoreWelcomeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::store_welcome(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StoreWelcomeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mls.MlsDeliveryService/FetchMessages" => {
                    #[allow(non_camel_case_types)]
                    struct FetchMessagesSvc<T: MlsDeliveryService>(pub Arc<T>);
                    impl<
                        T: MlsDeliveryService,
                    > tonic::server::UnaryService<super::FetchMessagesRequest>
                    for FetchMessagesSvc<T> {
                        type Response = super::FetchMessagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MlsDeliveryService>::fetch_messages(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MlsDeliveryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "mls.MlsDeliveryService";
    impl<T> tonic::server::NamedService for MlsDeliveryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
